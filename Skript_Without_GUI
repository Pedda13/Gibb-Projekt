# Dieses Skript ermöglicht die Remote-Steuerung eines Computers über die Kommandozeile.
clear
# While Schlaufe damit der Benutzer mehrmals das Skript durchlaufen kann.
while true
do
	# While Schlaufe um zu überprüfen, ob eine IP-Addresse eingegeben wurde und ob diese (grundsätzlich!!!) korrekt ist.
	while true
	do
		# Abfrage der IP-Addresse.
		read -p "Please enter IP-Address to Remote control: " UserIPAddress
		# Kontrolle, ob die Variable UserIPAddress leer ist oder nicht.
		if [ -z "$UserIPAddress" ]
		then
			clear
			echo "No Input"
			sleep 2
			continue
		fi
		# Splittet die IP-Addresse anhand der Punkte.
		IFS="." read -ra blocks <<< "$UserIPAddress"
		# Kontrolle, ob die IP-Adresse 4 Blöcke hat.
		if [ ${#blocks[@]} -ne 4 ];
		then
			clear
			echo "Invalid IP-Address"
			sleep 2
			continue
		else
			# Variable, damit schlussendlich, wenn alle Blöcke korrekt sind, weitergegangen werden kann.
			valid=true
		fi
		# Schlaufe, um jeden Block im Array zu überprüfen.
		for block in "${blocks[@]}";
		do
			# Falls der Block grösser oder gleich 0 und der Block kleiner oder gleich 255 ist, geht das Skript weiter. 
			if (( block < 255 ));
			then
				continue
			else
				valid=false
			fi
		done
		# Wenn die Kontrolle von Oben korrekt durchlaufen ist geht das Skript weiter.
		if [ $valid == true ]
		then
			# Es wird mithilfe eines pings getestet, op der Host erreichbar ist oder nicht.
			ping -c 2 -W 2 $UserIPAddress >/dev/null
			if [ $? -eq 0 ];
			then
				break
			else
				echo "IP-Address not reachable"
				sleep 2
				clear
				continue
			fi
		else
			# Ansonsten wird die Schlaufe erneut durchgegangen und es wird eine neue IP-Addresse eingegeben.
			clear
			echo "Invalid IP-Address"
			sleep 2
			continue
		fi
	done
	clear
	while true
	do
		# Abfrage für den Benutzer des ferngesteuerten Computers.
		read -p "Please enter an Username which has enough permissions: " UserName
		# Wenn der Benutzer kein Nutzernamen angibt, wird automatisch "root" als Nutzername verwendet.
		if [ -z "$UserName" ]
		then
			clear
			echo "No user given, user set to root"
			sleep 2
			UserName="root"
		else
			# Hier wird getestet, ob der Benutzer auf auf dem anderen PC vorhanden ist oder nicht
			ssh -o BatchMode=yes -o ConnectTimeout=5 $UserName@$UserIPAddress id -u $UserName >/dev/null 2>&1
			# Falls der Ping erfolgreich sein sollte geht das skript weiter.
			if [ $? -eq 0 ];
			then
				break
			else
				echo "User not valid"
				sleep 2
				continue
			fi
		fi
		clear
	done
	clear
	# Abfrage, was der Benutzer nun machen möchte; Neustarten, Herunterfahren, oder einenen benutzerdefinierten Command.
	echo "Choose what you want to do:"
	select UserChoice in "Restart" "Shutdown" "Custom"
	do
		# Code-Abschnitt, wenn der Benutzer Neustarten angewählt hat.
		case $UserChoice in
			"Restart")
				# Es wird eine SSH-Session mit den angegebenen Werten aufgebaut und der command "Sudo shutdown now -r" mitgegeben.
				ssh -t $UserName@$UserIPAddress "sudo shutdown now -r"
				while true
				do
					# Abfrage, ob der Benutzer noch eine andere IP benutzen möchte.
					read -p "Do you want to use another IP? (y/n)" UserAgain
					if [ $UserAgain == "y" ]
					then
						break
					elif [ $UserAgain == "n" ]
					then
						clear
						exit
					else
						clear
						echo "Invalid Input"
						sleep 2
						continue
					fi
				done
				;;
			# Code-Abschnitt, wenn der Benutzer Herunterfahren angewählt hat.
			"Shutdown")
				# Es wird eine SSH-Session mit den angegebenen Werten aufgebaut und der command "Sudo shutdown now" mitgegeben.
				ssh -t $UserName@$UserIPAddress "sudo shutdown now"
				while true
				do
					# Abfrage, ob der Benutzer noch eine andere IP benutzen möchte.
					read -p "Do you wnat to use another IP? (y/n)" UserAgain
					if [ $UserAgain == "y" ]
					then
						break
					elif [ $UserAgain == "n" ]
					then
						clear
						exit
					else
						clear
						echo "Invalid Input"
						sleep 2
						continue
					fi
				done
				;;
			# Code-Abschnitt, wenn der Benutzer benutzerdefinierter Command angewählt hat.
			"Custom")
				clear
				while true
				do
					# Der Benutzer wird aufgefordert den Command einzugeben.
					read -p "Please enter the command you want to use: " UserCommand
					# Kontrolle, ob die Variable UserCommand leer ist oder nicht.
					if [ -z "$UserCommand" ]
					then
						clear
						echo "No Command was entered"
						sleep 2
						continue
					else
						break
					fi
				done
				# Es wird eine SSH-Session mit den angegebenen Wertden aufgebaut und der eingegebene command mitgegeben.
				ssh -t $UserName@$UserIPAddress "$UserCommand"
				while true
				do
					# Abfrage, ob der Benutzer eine andere IP benutzen möchte.
					read -p "Do you want to use another IP? (y/n)" UserAgain
					if [ $UserAgain == "y" ]
					then
						break
					elif [ $UserAgain == "n" ]
					then
						clear
						exit
					else
						clear
						echo "Invalid Input"
						sleep 2
						continue
					fi
				done
				;;
			# Code-Abschnitt, wenn der Benutzer etwas eingegeben hat, was nicht verfügbar war.
			*)
				clear
				echo "Invalid Input"
				sleep 2
				continue
				;;
		esac
	done
done
clear
